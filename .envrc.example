##################################################
#                 Getting Started                #
##################################################

# Admin account
export GS_ADMIN_ADDRESS=0x2546BcD3c84621e976D8185a91A922aE77ECEc30
export GS_ADMIN_PRIVATE_KEY=0xea6c44ac03bff858b476bba40716402b03e41b8e97e276d1baec7c37d42484a0

# Batcher account
export GS_BATCHER_ADDRESS=0xbDA5747bFD65F08deb54cb465eB87D40e51B197E
export GS_BATCHER_PRIVATE_KEY=0x689af8efa8c651a91ad287602527f3af2fe9f6501a7ac4b061667b5a93e037fd

# Proposer account
export GS_PROPOSER_ADDRESS=0xdD2FD4581271e230360230F9337D5c0430Bf44C0
export GS_PROPOSER_PRIVATE_KEY=0xde9be858da4a475276426320d5e9262ecfc3ba460bfac56360bfa6c4c28b4ee0

# Sequencer account
export GS_SEQUENCER_ADDRESS=0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199
export GS_SEQUENCER_PRIVATE_KEY=0xdf57089febbacf7ba0bc227dafbffa9fc08a93fdc68e1e42411a14efcf23656e


##################################################
#                Chain Information               #
##################################################

# L1 chain information
export L1_CHAIN_ID=11155111
export L1_BLOCK_TIME=12

# L2 chain information
export L2_CHAIN_ID=42069
export L2_BLOCK_TIME=2

##################################################
#              op-node Configuration             #
##################################################

# The kind of RPC provider, used to inform optimal transactions receipts
# fetching. Valid options: alchemy, quicknode, infura, parity, nethermind,
# debug_geth, erigon, basic, any.
export L1_RPC_KIND=alchemy

##################################################
#               Contract Deployment              #
##################################################

# RPC URL for the L1 network to interact with
export L1_RPC_URL=http://localhost:8545
export L2_RPC_URL=http://localhost:8645
export OP_ROLLUP_PORT=9545
export OP_BATCHER_PORT=9645
export OP_NODE_RPC_URL=http://localhost:$OP_ROLLUP_PORT
export OP_BATCHER_RPC_URL=http://localhost:$OP_BATCHER_PORT

# Specified branches for the repositories.
export HK_GETH_BRANCH=develop
export HK_VERSE_BRANCH=develop

# Salt used via CREATE2 to determine implementation addresses
# NOTE: If you want to deploy contracts from scratch you MUST reload this
#       variable to ensure the salt is regenerated and the contracts are
#       deployed to new addresses (otherwise deployment will fail)
export IMPL_SALT=$(openssl rand -hex 32)

# Name for the deployed network
export DEPLOYMENT_CONTEXT=getting-started

# Optional Tenderly details for simulation link during deployment
export TENDERLY_PROJECT=
export TENDERLY_USERNAME=

# Optional Etherscan API key for contract verification
export ETHERSCAN_API_KEY=

# Private key to use for contract deployments, you don't need to worry about
# this for the Getting Started guide.
# 0x70997970C51812dc3A010C7d01b50e0d17dc79C8, the account is from anvil's default test account.
export PRIVATE_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d

# base path, used for the project
export BASE_PATH=$PWD
export CONTRACTS_BEDROCK_PATH=$BASE_PATH/verse/packages/contracts-bedrock
export OP_NODE_PATH=$BASE_PATH/verse/op-node
export PATH=$PATH:$BASE_PATH/bin

# contracts-bedrock relate paths
export CONTRACT_ADDRESSES_PATH=""
export CHAIN_ID=$L2_CHAIN_ID

# Generated paths for the deployment context.
export DEPLOYMENT_CONFIG_PATH=$BASE_PATH/config/$DEPLOYMENT_CONTEXT

# The generated files.
export DEPLOY_CONFIG_PATH=$CONTRACTS_BEDROCK_PATH/deploy-config/$DEPLOYMENT_CONTEXT.json
export DEPLOYMENT_OUTFILE=$CONTRACTS_BEDROCK_PATH/deployments/artifact.json
export STATE_DUMP_PATH=$CONTRACTS_BEDROCK_PATH/deployments/state-dump-latest.json
export OP_GETH_GENESIS_FILE=$CONTRACTS_BEDROCK_PATH/deployments/genesis.json
export OP_NODE_ROLLUP_FILE=$CONTRACTS_BEDROCK_PATH/deployments/rollup.json
